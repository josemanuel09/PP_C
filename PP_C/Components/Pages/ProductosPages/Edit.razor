@page "/Edit/{ProductoId:int}"
@inject ProductoServices ProductoServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<EditForm Model="Producto" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Actualizar Producto</h3>
        </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="PrioridadId" class="form-label">ProductoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Producto.ProductoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripci&oacuten:</label>
                <InputText @bind-Value="Producto.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Producto.Descripcion)" />
            </div>

            <div class="mb-3">
                <label for="DiasCompromiso" class="form-label">Precio:</label>
                <InputNumber @bind-Value="Producto.Precio" class="form-control" />
                <ValidationMessage For="@(() => Producto.Precio)" />
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Actualizar </button>
                <a type="button" href="/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int ProductoId { get; set; }
    public Productos Producto { get; set; } = new Productos();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (ProductoId != 0)
        {
            await Buscar();
        }
    }
    public async Task Buscar()
    {
        Existe = false;
        var productoEncontrada = await ProductoServices.Buscar(ProductoId);

        if (productoEncontrada != null)
        {
            Producto = productoEncontrada;
        }
        else
        {
            await Nuevo();
        }
    }


    private bool Validar()
    {
        Existe = ProductoServices.Listar(pr => pr.Descripcion!.ToLower() == Producto.Descripcion!.ToLower() && pr.ProductoId != Producto.ProductoId).Any();
        return Existe;
    }

    private async Task Guardar()
    {
        if (Validar())
        {
            // Implement JSRuntime to show a message
            await JSRuntime.InvokeVoidAsync("alert", "El producto ya existe.");
            return;
        }

        var guardo = await ProductoServices.Guardar(Producto);
        if (guardo)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Producto se actualizo correctamente.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al actualizar el producto.");
        }
    }

    private async Task Nuevo()
    {
        Producto = new Productos();
        Existe = false;
    }

    private async Task Eliminar()
    {
        var eliminado = await ProductoServices.Eliminar(Producto.ProductoId);
        if (eliminado)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Producto eliminado correctamente.");
            await Nuevo();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el producto.");
        }
    }
}
